<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>roadmap-front-end-1 Internet explain</title>
      <link href="/2022/12/15/roadmap-front-end-1-internet-explain/"/>
      <url>/2022/12/15/roadmap-front-end-1-internet-explain/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is-the-internet"><a href="#What-is-the-internet" class="headerlink" title="What is the internet?"></a>What is the internet?</h3><p>互联网是世界上最流行的计算机网络，它始于1969年的一个学术研究项目，并在20世纪90年代成为一个全球商业网络。如今，全世界有超过20亿人在使用它。</p><p>互联网以去中心化而闻名。没有人拥有互联网，也没有谁控制谁可以连接互联网。相反，数千个不同的组织运营着自己的网络，并通过协议达成自愿互联协议。</p><p>大多数人通过网络浏览器访问互联网内容。确实，网络已经变得如此流行，以至于许多人错误的将互联网和web视为同义词。但实际上，网络只是众多互联网应用中的一种。其他流行的互联网应用程序包括电子邮件和BitTorrent。</p><h3 id="Where-is-the-internet"><a href="#Where-is-the-internet" class="headerlink" title="Where is the internet?"></a>Where is the internet?</h3><p>互联网有3个基本部分：</p><ul><li><p>最后一英里是互联网的一部分，将家庭和小企业连接到互联网上，目前，美国约有60%的住宅互联网连接到有康卡斯特和时代华纳等有线电视公司提供的。在剩下的40%中，越来越多的人使用新的光纤电缆，其中大部分是Verizon的FiOS计划或AT&amp;T的U-Verse计划的一部分，最后，使用过时的通过电话线缆的DSL服务的用户数量客观，但正在减少。</p><p>最后一英里还包括让人们用手机上网的信号塔。无线互联网服务在所有互联网使用中所占的份额很大，而且还在不断增长。</p></li><li><p>数据中心充满服务器的房间，存储用户数据并托管在线应用程序和内容。其中一些为谷歌和Facebook等大公司所有。其他是为许多小型网站提供服务的商业设施。数据中心有非常快的互联网连接，允许他们同时为许多用户服务。数据中心可以位于世界上任何地方，但他们通常位于土地和电力便宜的偏远地区，例如，谷歌、facebook和微软都在爱荷华州建立了庞大的数据中心。</p></li><li><p>主干网有长距离网络组成，主要是在光纤电缆上————在数据中心和用户之间传输数据。主干市场竞争激烈。主干网提供商进场在互联网交换点连接他们的网络，通常位于主要城市，在iep建立业务使骨干供应商更容易改善与其他供应商的连接。</p></li></ul><h3 id="Who-created-the-internet"><a href="#Who-created-the-internet" class="headerlink" title="Who created the internet?"></a>Who created the internet?</h3><p>互联网最初是阿帕网(ARPANET)，这是一个由军方高级研究计划局(ARPA，现为DARPA)资助的学术研究网络。该项目由ARPA管理员鲍勃·泰勒(Bob Taylor)领导，网络由博尔特、贝拉内克和纽曼(Bolt、Beranek和Newman)的咨询公司建造。它于1969年开始运营。1973年，软件工程师文特·瑟夫和鲍勃·卡恩开始为阿帕网制定下一代网络标准。这些被称为TCP&#x2F;IP的标准成为现代互联网的基础。阿帕网在1983年1月1日切换到使用TCP&#x2F;IP。在20世纪80年代，互联网的资金从军方转移到国家科学基金会。从1981年到1994年，NSF资助了作为互联网骨干的长途网络。1994年，克林顿政府将互联网主干网的控制权移交给私营部门。从那以后，它一直由私人经营和资助。</p><h3 id="阿尔戈尔发明了互联网？"><a href="#阿尔戈尔发明了互联网？" class="headerlink" title="阿尔戈尔发明了互联网？"></a>阿尔戈尔发明了互联网？</h3><p>人们经常引用美国前副总统阿尔戈尔的话说，他为互联网的发明做出了贡献，但他在1999接受CNN采访时实际上说的是“我主动创造了互联网”。戈尔的这一声明遭到了广泛的嘲笑。但是真正发明互联网的人，TCP&#x2F;IP设计者鲍勃卡恩和温特瑟夫在2000年为戈尔辩护时写道。他们认为，戈尔是“第一个认识到互联网重要性并推动和支持其发展的政治领导人”，两人写道：“早在20世纪70年代，戈尔议员就提出了高速电信的想法。”“20世纪80年代，戈尔还是参议员时，曾敦促政府机构将当时几十个不同的、互不相连的网络整合成一个‘跨部门网络”戈尔赞助了1991年的《高性能计算与通信法案》（High Performance Computing and Communications Act），卡恩和瑟夫说，该法案“成为互联网在计算机科学领域之外传播的主要工具之一”。”</p><h3 id="谁在运营互联网？"><a href="#谁在运营互联网？" class="headerlink" title="谁在运营互联网？"></a>谁在运营互联网？</h3><p>没有人管理互联网，他被组织成一个分散的网络中的网络。成千上万的公司、大学、政府和其他运营实体运营者自己的网络，并根据自愿互联协议相互交换流量。是互联网工作的共享技术标准有一个名为互联网工程任务的组织管理（Internet Engineering Task Force）。IETF是一个开放组织，任何人都可以自由参加会议，提出新的标准，并建议对现有标准进行修改，没有人被要求采用IETF认可的标准，但IETF基于共识的决策过程有助于确保其建议被互联网社区普遍采用。</p><p>互联网名称与数字地址分配机构(ICANN)有时被描述为负责互联网治理的机构。顾名思义，ICANN负责分配域名和IP地址。但ICANN并不控制谁可以连接到互联网，也不控制什么样得信息可以通过互联网发送。</p><h3 id="IP地址是什么？"><a href="#IP地址是什么？" class="headerlink" title="IP地址是什么？"></a>IP地址是什么？</h3><p>互联网协议地址是计算机在互联网上用来相互识别的数字。例如，vox.com的IP地址为216.146.46.10。ICANN的一个部门被称为互联网数字分配机构，负责分配IP地址，以确保两个不同的组织不会使用相同的地址。</p><h3 id="IPv6是什么？"><a href="#IPv6是什么？" class="headerlink" title="IPv6是什么？"></a>IPv6是什么？</h3><p>目前的互联网标准，即IPv4，只允许大约40亿个IP地址。这在20世纪70年代被认为是一个非常大的数字，但今天，IPv4地址的供应几乎耗尽。因此，互联网工程师开发了一种名为IPv6的新标准。IPv6允许一个令人难以置信的唯一地址的数量——确切的数字是39位——确保世界再也不会用完。起初，向IPv6的过渡是缓慢的。该标准的技术工作在20世纪90年代完成，但互联网社区面临着一个严重的鸡生蛋还是蛋生鸡的问题:只要大多数人都在使用IPv4，就没有什么动力去切换到IPv6。但随着IPv4地址的稀缺，IPv6的采用加速了。通过IPv6连接谷歌的用户比例从2013年初的1%增长到2015年年中的6%。</p><h3 id="无线互联网是怎么工作的？"><a href="#无线互联网是怎么工作的？" class="headerlink" title="无线互联网是怎么工作的？"></a>无线互联网是怎么工作的？</h3><p>在早期，互联网接入是通过物理电缆传输的。但最近无线互联网接入变得越来越普遍。</p><p>无线互联网接入有两种基本类型：wifi和蜂窝网络。wifi网络相对简单。任何人都可以购买wifi网络设备，以便在家里或公司提供互联网接入。wifi网络使用未经许可的频谱，任何人都可以免费试用的电磁频率。为了防止邻居的网络相互干扰，wifi网络的功率（以及范围）有严格的限制。</p><p>蜂窝网络更加集中。它们通过讲服务领域分解为单元来工作。在人口最密集的地区，细胞可以向一个城市街区那么小；在农村地区，一个细胞可能有几英里宽，每个小区的中心都有一个塔，为那里的设备提供服务，当一个设备从一个基站移动到另一个基站是，网络会自动将设备从一个发射塔转移到另一个发射塔，允许用户不间断地继续通信。</p><p>蜂窝体积较大，无法使用wifi网路使用的未经许可的低功率频段。相反，蜂窝网络使用的是独家授权的频谱。由于频谱稀缺，通常通过拍卖的方式获得。自1994年首次举行无线拍卖以来，已为美国财政部创造了数百亿美元的收入。</p><h3 id="云是什么？"><a href="#云是什么？" class="headerlink" title="云是什么？"></a>云是什么？</h3><p>云描述了一种在21世纪初变得流行的计算方法。通过在服务器上存储文件并通过互联网交付软件，云计算为用户提供了更简单、更可靠的计算体验。云计算允许消费者和企业将计算是为一种实用工具，将技术细节留给技术公司。</p><p>例如，在20世纪90年代。许多人使用微软Office来编辑文档和电子表格。他们把文件存储在硬盘上。当微软Office发布新版本时，用户必须购买并手动安装到个人电脑上。</p><p>相比之下，谷歌Docs是一个云办公套件。当用户访问docs.google.com时，她会自动获得谷歌文档的最新版本。因为她的文件存储在谷歌的服务器上，所以可以从任何一台电脑上查看。更好的是，她不必担心在硬盘崩溃时丢失文件。(微软现在有自己的云办公套件office 365。)</p><p>还有很多其他的例子。Gmail和Hotmail是云电子邮件服务，在很大程度上取代了桌面电子邮件客户端，如Outlook。Dropbox是一种云计算服务，可以在设备之间自动同步数据，使人们不必随身携带软盘上的文件。苹果的iCloud会自动将用户的音乐和其他文件从桌面电脑复制到移动设备上，省去了用户通过USB连接进行同步的麻烦。</p><p>云计算也对企业产生了巨大的影响。在20世纪90年代，想要创建网站的公司需要购买并运营自己的服务器。但在2006年，亚马逊推出了亚马逊网络服务，允许客户按小时租用服务器。这降低了创建网站的门槛，并使网站在变得更受欢迎时更容易迅速扩大容量。</p><h3 id="什么是包？"><a href="#什么是包？" class="headerlink" title="什么是包？"></a>什么是包？</h3><p>包是在因特网上传输信息的基本单位。将信息分割成易于理解的小块，可以更有效地利用网络的容量。</p><p>数据包有两部分。报头包含帮助数据包到达目的地的信息，包括数据包的长度、源和目的地，以及帮助接收方检测数据包是否在传输过程中损坏的校验和值。在报头之后是实际数据。一个数据包最多可以包含64千字节的数据，大约是20页纯文本。</p><p>如果互联网路由器遇到拥塞或其他技术问题，他们可以通过丢弃数据包来解决。发送计算机的职责是检测数据包没有到达目的地，并发送另一个副本。这种方法似乎违反直觉，但它简化了互联网的核心基础设施，以更低的成本获得更高的性能。</p><h3 id="什么是万维网？"><a href="#什么是万维网？" class="headerlink" title="什么是万维网？"></a>什么是万维网？</h3><p>万维网是在互联网上发布信息的一种流行方式。1991年，欧洲核子研究组织(CERN)的计算机程序员蒂莫西·伯纳斯-李(Timothy Berners-Lee)创建了该网站。它提供了比其他互联网应用程序更强大和用户友好的界面。web支持超链接，允许用户通过一次点击从一个文档浏览到另一个文档。</p><p>随着时间的推移，网络变得越来越复杂，支持图像、音频、视频和交互式内容。上世纪90年代中期，雅虎(Yahoo)和亚马逊(Amazon.com)等公司开始建立基于网络的盈利业务。21世纪初，雅虎地图(Yahoo Maps)和谷歌文档(谷歌Docs)等功能齐全的网络应用程序诞生了。</p><p>1994年，Berners-Lee创建了万维网联盟(W3C)，作为万维网的官方标准组织。他仍然是W3C的负责人，并继续监督网络标准的开发。然而，网络是一个开放平台，W3C不能强迫任何人采纳它的建议。实际上，对网络影响最大的组织是微软、谷歌、苹果和Mozilla，这些公司生产领先的网络浏览器。这四家公司采用的任何技术都成为事实上的网络标准。</p><p>网络已经变得如此流行，以至于许多人现在把它视为互联网本身的代名词。但从技术上讲，网络只是众多互联网应用中的一种。其他应用包括电子邮件和BitTorrent。</p><h3 id="什么是网络浏览器"><a href="#什么是网络浏览器" class="headerlink" title="什么是网络浏览器?"></a>什么是网络浏览器?</h3><p>网络浏览器是一种允许用户下载和浏览网站的计算机程序。Web浏览器可用于台式电脑、平板电脑和移动电话。</p><p>第一个广泛使用的浏览器是由伊利诺伊大学的研究人员创建的Mosaic。Mosaic团队搬到加州创建了Netscape，并于1994年开发了第一个商业上成功的网络浏览器。</p><p>网景的受欢迎程度很快就被微软的ie浏览器盖过，但网景浏览器的开源版本成为了现代的火狐浏览器。苹果发布了Safari浏览器</p><h3 id="什么是SSL"><a href="#什么是SSL" class="headerlink" title="什么是SSL?"></a>什么是SSL?</h3><p>SSL是安全套接字层(Secure Sockets Layer)的缩写，是一系列加密技术，允许网络用户保护他们在互联网上传输的信息的隐私。</p><p>当你访问一个安全的网站，如Gmail.com，你会看到一个锁旁边的URL，表明你与该网站的通信是加密的。在谷歌的Chrome浏览器中，这个锁是用来表示第三方无法读取你发送或接收的任何信息。在底层，SSL通过将您的数据转换为只有接收者知道如何破译的编码消息来实现这一点。如果恶意的一方正在监听对话，它只会看到一串看似随机的字符，而不会看到你的电子邮件、Facebook帖子、信用卡号码或其他私人信息的内容。</p><p>SSL是Netscape在1994年引入的。在早期，它只在少数类型的网站上使用，比如网上银行网站。到2010年代初，谷歌、雅虎和Facebook都在其网站和在线服务中使用SSL加密。最近，出现了一种使SSL的使用普遍化的趋势。2015年，Mozilla宣布，</p><p>未来版本的Firefox浏览器将把缺乏SSL加密视为安全漏洞，以此鼓励所有网站升级。谷歌正在考虑在Chrome上采取同样的步骤。</p><h3 id="什么是域名系统"><a href="#什么是域名系统" class="headerlink" title="什么是域名系统?"></a>什么是域名系统?</h3><p>通过域名系统(DNS)，你可以在浏览器中输入vox.com来访问Vox，而不是像216.146.46.10这样难以记忆的数字地址。</p><p>这个系统是分级的。例如，.com域名由一家名为Verisign的公司管理。Verisign分配子域名，如google.com和vox.com。这些二级域名的所有者反过来可以创建子域名，如mail.google.com和maps.google.com。</p><p>由于流行的网站使用域名来向公众识别自己，DNS的安全性越来越受到关注。犯罪分子和政府间谍都曾试图破解DNS，以冒充流行网站，如facebook.com和gmail.com，拦截他们的私人通信。一种名为DNSSEC的标准试图通过加密来加强DNS的安全性，但很少有人采用它。</p><h3 id="谁决定域名的存在，谁得到域名"><a href="#谁决定域名的存在，谁得到域名" class="headerlink" title="谁决定域名的存在，谁得到域名?"></a>谁决定域名的存在，谁得到域名?</h3><p>该域名系统由互联网名称与数字地址分配机构(ICANN)管理，这是一家总部位于加利福尼亚州的非营利组织。ICANN成立于1998年。美国商务部(US Commerce Department)授予了该公司在DNS方面的权限，尽管该公司越来越强调自己独立于美国政府。</p><p>域名有两种类型。第一种是通用顶级域名(gtld)，如.com、.edu、.org和.gov。由于互联网起源于美国，这些域名往往在那里最受欢迎。这些领域的权限通常委托给私人组织。还有国家代码顶级域名(cctld)。世界上每个国家都有自己的两个字母的代码。例如，美国的ccTLD是。us，英国的是。uk，中国的是。cn。这些域名由每个国家的当局管理。一些cctld，如.tv(岛国图瓦卢)和.io(英属印度洋领土)，在其母国以外的地区已经很受欢迎。2011年，ICANN投票决定简化创建新通用顶级域名的流程。因此，未来几年可能会出现数十个甚至数百个新域名。</p>]]></content>
      
      
      <categories>
          
          <category> Front-end </category>
          
          <category> Internet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Front-end </tag>
            
            <tag> Internet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot面试题目</title>
      <link href="/2022/07/13/springboot-mian-shi-ti-mu/"/>
      <url>/2022/07/13/springboot-mian-shi-ti-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-面试题目"><a href="#springboot-面试题目" class="headerlink" title="springboot 面试题目"></a>springboot 面试题目</h1><ol><li>描述一下 springboot 的作用</li></ol><ul><li><p>自动依赖管理</p><ul><li>在 Springboot-dependency 中定义各种 jar 包的版本，进行导入，省去自己去导入的过程</li></ul></li><li><p>自动配置原理</p><ul><li>springboot.autoconfigure 包保存了大量的自动配置类，对应每个常用的框架，使用 Java 代码对框架进行配置</li><li>每个自动配置类生效的条件是：导入了对应的依赖 @ConditionOnClass({类.class})</li><li>在 META-INF&#x2F;spring.factores 中把所有自动配置类的全名定义出来</li><li>在 SpringBoot 类上有@SpringBootApplication 注解</li><li>该注解由三个注解组成：<ul><li>SpringbootConfiguration 代表该类作为配置类使用</li><li>ComponentScan 对包进行扫描</li><li>EnableAutoConfiguration 启动自动配置</li></ul></li><li>在 EnableAutoConfiguration 注解的 XXSelector 源码中，会读取 spring.factores 文件，通过反射将所有的自动配置类加载到内存中，启动了自动配置</li></ul></li></ul><ol><li>springboot 有哪些特性</li></ol><ul><li>遵循习惯优于配置的原则。使用 springboot 我们只需要很少的配置，大多数使用默认配置即可</li><li>项目快速搭建。springboot 帮助开发者快速搭建 spring 框架，可无需配置的自动整合第三方框架</li><li>可以完全不使用 xml 配置，只需要自动配置和 Java config</li><li>内嵌 servlet 容器，降低了对环境的要求，可用命令直接执行项目</li><li>提供了 starter POM，能够非常方便的进行包管理</li><li>对主流框架无配置集成</li><li>与云计算天然集成</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT登录认证以及自动续期</title>
      <link href="/2022/05/24/jwt-deng-lu-ren-zheng-yi-ji-zi-dong-xu-qi/"/>
      <url>/2022/05/24/jwt-deng-lu-ren-zheng-yi-ji-zi-dong-xu-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>要实现认证功能，很容易就会想到 JWT 或者 session，但是两者有啥区别？各自的优缺点？应该 Pick 谁？夺命三连</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>基于 session 和基于 JWT 的方式的主要区别就是用户的状态保存的位置，session 是保存在服务端的，而 JWT 是保存在客户端的</p><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><p>基于 session 的认证流程</p><ul><li>用户在浏览器中输入用户名和密码，服务器通过密码校验后生成一个 session 并保存到数据库</li><li>服务器为用户生成一个 sessionId，并将具有 sesssionId 的 cookie 放置在用户浏览器中，在后续的请求中都将带有这个 cookie 信息进行访问</li><li>服务器获取 cookie，通过获取 cookie 中的 sessionId 查找数据库判断当前请求是否有效</li></ul><p>基于 JWT 的认证流程</p><ul><li>用户在浏览器中输入用户名和密码，服务器通过密码校验后生成一个 token 并保存到数据库</li><li>前端获取到 token，存储到 cookie 或者 local storage 中，在后续的请求中都将带有这个 token 信息进行访问</li><li>服务器获取 token 值，通过查找数据库判断当前 token 是否有效</li></ul><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>JWT 保存在客户端，在分布式环境下不需要做额外工作。而 session 因为保存在服务端，分布式环境下需要实现多机数据共享 session 一般需要结合 Cookie 实现认证，所以需要浏览器支持 cookie，因此移动端无法使用 session 认证方案</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>JWT 的 payload 使用的是 base64 编码的，因此在 JWT 中不能存储敏感数据。而 session 的信息是存在服务端的，相对来说更安全</p><p>如果在 JWT 中存储了敏感信息，可以解码出来非常的不安全</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>经过编码之后 JWT 将非常长，cookie 的限制大小一般是 4k，cookie 很可能放不下，所以 JWT 一般放在 local storage 里面。并且用户在系统中的每一次 http 请求都会把 JWT 携带在 Header 里面，HTTP 请求的 Header 可能比 Body 还要大。而 sessionId 只是很短的一个字符串，因此使用 JWT 的 HTTP 请求比使用 session 的开销大得多</p><h2 id="一次性"><a href="#一次性" class="headerlink" title="一次性"></a>一次性</h2><p>无状态是 JWT 的特点，但也导致了这个问题，JWT 是一次性的。想修改里面的内容，就必须签发一个新的 JWT</p><h2 id="无法废弃"><a href="#无法废弃" class="headerlink" title="无法废弃"></a>无法废弃</h2><p>一旦签发一个 JWT，在到期之前就会始终有效，无法中途废弃。若想废弃，一种常用的处理手段是结合 redis</p><h2 id="续签"><a href="#续签" class="headerlink" title="续签"></a>续签</h2><p>如果使用 JWT 做会话管理，传统的 cookie 续签方案一般都是框架自带的，session 有效期 30 分钟，30 分钟内如果有访问，有效期被刷新至 30 分钟。一样的道理，要改变 JWT 的有效时间，就要签发新的 JWT。</p><p>最简单的一种方式是每次请求刷新 JWT，即每个 HTTP 请求都返回一个新的 JWT。这个方法不仅暴力不优雅，而且每次请求都要做 JWT 的加密解密，会带来性能问题。另一种方法是在 redis 中单独为每个 JWT 设置过期时间，每次访问时刷新 JWT 的过期时间</p><h2 id="选择-JWT-或-session"><a href="#选择-JWT-或-session" class="headerlink" title="选择 JWT 或 session"></a>选择 JWT 或 session</h2><p>我投 JWT 一票，JWT 有很多缺点，但是在分布式环境下不需要像 session 一样额外实现多机数据共享，虽然 seesion 的多机数据共享可以通过粘性 session、session 共享、session 复制、持久化 session、terracoa 实现 seesion 复制等多种成熟的方案来解决这个问题。但是 JWT 不需要额外的工作，使用 JWT 不香吗？且 JWT 一次性的缺点可以结合 redis 进行弥补。</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="JWT-所需依赖"><a href="#JWT-所需依赖" class="headerlink" title="JWT 所需依赖"></a>JWT 所需依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JWT-工具类"><a href="#JWT-工具类" class="headerlink" title="JWT 工具类"></a>JWT 工具类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class JWTUtil &#123;    private static final Logger logger &#x3D; LoggerFactory.getLogger(JWTUtil.class);    &#x2F;&#x2F;私钥    private static final String TOKEN_SECRET &#x3D; &quot;123456&quot;;    &#x2F;**     * 生成token，自定义过期时间 毫秒     *     * @param userTokenDTO     * @return     *&#x2F;    public static String generateToken(UserTokenDTO userTokenDTO) &#123;        try &#123;            &#x2F;&#x2F; 私钥和加密算法            Algorithm algorithm &#x3D; Algorithm.HMAC256(TOKEN_SECRET);            &#x2F;&#x2F; 设置头部信息            Map&lt;String, Object&gt; header &#x3D; new HashMap&lt;&gt;(2);            header.put(&quot;Type&quot;, &quot;Jwt&quot;);            header.put(&quot;alg&quot;, &quot;HS256&quot;);            return JWT.create()                    .withHeader(header)                    .withClaim(&quot;token&quot;, JSONObject.toJSONString(userTokenDTO))                    &#x2F;&#x2F;.withExpiresAt(date)                    .sign(algorithm);        &#125; catch (Exception e) &#123;            logger.error(&quot;generate token occur error, error is:&#123;&#125;&quot;, e);            return null;        &#125;    &#125;    &#x2F;**     * 检验token是否正确     *     * @param token     * @return     *&#x2F;    public static UserTokenDTO parseToken(String token) &#123;        Algorithm algorithm &#x3D; Algorithm.HMAC256(TOKEN_SECRET);        JWTVerifier verifier &#x3D; JWT.require(algorithm).build();        DecodedJWT jwt &#x3D; verifier.verify(token);        String tokenInfo &#x3D; jwt.getClaim(&quot;token&quot;).asString();        return JSON.parseObject(tokenInfo, UserTokenDTO.class);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ul><li>生成的 token 中不带有过期时间，token 的过期时间由 redis 进行管理</li><li>UserTokenDTO 中不带有敏感信息，如 password 字段不会出现在 token 中</li></ul><h3 id="Redis-工具类"><a href="#Redis-工具类" class="headerlink" title="Redis 工具类"></a>Redis 工具类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public final class RedisServiceImpl implements RedisService &#123;    &#x2F;**     * 过期时长     *&#x2F;    private final Long DURATION &#x3D; 1 * 24 * 60 * 60 * 1000L;    @Resource    private RedisTemplate redisTemplate;    private ValueOperations&lt;String, String&gt; valueOperations;    @PostConstruct    public void init() &#123;        RedisSerializer redisSerializer &#x3D; new StringRedisSerializer();        redisTemplate.setKeySerializer(redisSerializer);        redisTemplate.setValueSerializer(redisSerializer);        redisTemplate.setHashKeySerializer(redisSerializer);        redisTemplate.setHashValueSerializer(redisSerializer);        valueOperations &#x3D; redisTemplate.opsForValue();    &#125;    @Override    public void set(String key, String value) &#123;        valueOperations.set(key, value, DURATION, TimeUnit.MILLISECONDS);        log.info(&quot;key&#x3D;&#123;&#125;, value is: &#123;&#125; into redis cache&quot;, key, value);    &#125;    @Override    public String get(String key) &#123;        String redisValue &#x3D; valueOperations.get(key);        log.info(&quot;get from redis, value is: &#123;&#125;&quot;, redisValue);        return redisValue;    &#125;    @Override    public boolean delete(String key) &#123;        boolean result &#x3D; redisTemplate.delete(key);        log.info(&quot;delete from redis, key is: &#123;&#125;&quot;, key);        return result;    &#125;    @Override    public Long getExpireTime(String key) &#123;        return valueOperations.getOperations().getExpire(key);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RedisTemplate 简单封装</p><h2 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h2><h3 id="登陆功能"><a href="#登陆功能" class="headerlink" title="登陆功能"></a>登陆功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String login(LoginUserVO loginUserVO) &#123;    &#x2F;&#x2F;1.判断用户名密码是否正确    UserPO userPO &#x3D; userMapper.getByUsername(loginUserVO.getUsername());    if (userPO &#x3D;&#x3D; null) &#123;        throw new UserException(ErrorCodeEnum.TNP1001001);    &#125;    if (!loginUserVO.getPassword().equals(userPO.getPassword())) &#123;        throw new UserException(ErrorCodeEnum.TNP1001002);    &#125;    &#x2F;&#x2F;2.用户名密码正确生成token    UserTokenDTO userTokenDTO &#x3D; new UserTokenDTO();    PropertiesUtil.copyProperties(userTokenDTO, loginUserVO);    userTokenDTO.setId(userPO.getId());    userTokenDTO.setGmtCreate(System.currentTimeMillis());    String token &#x3D; JWTUtil.generateToken(userTokenDTO);    &#x2F;&#x2F;3.存入token至redis    redisService.set(userPO.getId(), token);    return token;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h4><ul><li>判断用户名密码是否正确</li><li>用户名密码正确则生成 token</li><li>将生成的 token 保存至 redis</li></ul><h3 id="登出功能"><a href="#登出功能" class="headerlink" title="登出功能"></a>登出功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public boolean loginOut(String id) &#123;     boolean result &#x3D; redisService.delete(id);     if (!redisService.delete(id)) &#123;        throw new UserException(ErrorCodeEnum.TNP1001003);     &#125;     return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将对应的 key 删除即可</p><h3 id="更新密码功能"><a href="#更新密码功能" class="headerlink" title="更新密码功能"></a>更新密码功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public String updatePassword(UpdatePasswordUserVO updatePasswordUserVO) &#123;    &#x2F;&#x2F;1.修改密码    UserPO userPO &#x3D; UserPO.builder().password(updatePasswordUserVO.getPassword())            .id(updatePasswordUserVO.getId())            .build();    UserPO user &#x3D; userMapper.getById(updatePasswordUserVO.getId());    if (user &#x3D;&#x3D; null) &#123;        throw new UserException(ErrorCodeEnum.TNP1001001);    &#125;    if (userMapper.updatePassword(userPO) !&#x3D; 1) &#123;        throw new UserException(ErrorCodeEnum.TNP1001005);    &#125;    &#x2F;&#x2F;2.生成新的token    UserTokenDTO userTokenDTO &#x3D; UserTokenDTO.builder()            .id(updatePasswordUserVO.getId())            .username(user.getUsername())            .gmtCreate(System.currentTimeMillis()).build();    String token &#x3D; JWTUtil.generateToken(userTokenDTO);    &#x2F;&#x2F;3.更新token    redisService.set(user.getId(), token);    return token;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><blockquote><p>更新用户密码时需要重新生成新的 token，并将新的 token 返回给前端，由前端更新保存在 local storage 中的 token，同时更新存储在 redis 中的 token，这样实现可以避免用户重新登陆，用户体验感不至于太差</p></blockquote><h4 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h4><p>在实际项目中，用户分为普通用户和管理员用户，只有管理员用户拥有删除用户的权限，这一块功能也是涉及 token 操作的，但是我太懒了，demo 工程就不写了</p><p>在实际项目中，密码传输是加密过的</p><h3 id="拦截器类"><a href="#拦截器类" class="headerlink" title="拦截器类"></a>拦截器类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public boolean preHandle(HttpServletRequest request, HttpServletResponse response,                             Object handler) throws Exception &#123;    String authToken &#x3D; request.getHeader(&quot;Authorization&quot;);    String token &#x3D; authToken.substring(&quot;Bearer&quot;.length() + 1).trim();    UserTokenDTO userTokenDTO &#x3D; JWTUtil.parseToken(token);    &#x2F;&#x2F;1.判断请求是否有效    if (redisService.get(userTokenDTO.getId()) &#x3D;&#x3D; null            || !redisService.get(userTokenDTO.getId()).equals(token)) &#123;        return false;    &#125;    &#x2F;&#x2F;2.判断是否需要续期    if (redisService.getExpireTime(userTokenDTO.getId()) &lt; 1 * 60 * 30) &#123;        redisService.set(userTokenDTO.getId(), token);        log.error(&quot;update token info, id is:&#123;&#125;, user info is:&#123;&#125;&quot;, userTokenDTO.getId(), token);    &#125;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明：-2"><a href="#说明：-2" class="headerlink" title="说明："></a>说明：</h4><p>拦截器中主要做两件事，一是对 token 进行校验，二是判断 token 是否需要进行续期</p><h5 id="token-校验："><a href="#token-校验：" class="headerlink" title="token 校验："></a>token 校验：</h5><ul><li>判断 id 对应的 token 是否不存在，不存在则 token 过期</li><li>若 token 存在则比较 token 是否一致，保证同一时间只有一个用户操作</li></ul><h5 id="token-自动续期："><a href="#token-自动续期：" class="headerlink" title="token 自动续期："></a>token 自动续期：</h5><p>为了不频繁操作 redis，只有当离过期时间只有 30 分钟时才更新过期时间</p><h3 id="拦截器配置类"><a href="#拦截器配置类" class="headerlink" title="拦截器配置类"></a>拦截器配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class InterceptorConfig implements WebMvcConfigurer &#123;    @Override    public void addInterceptors(InterceptorRegistry registry) &#123;        registry.addInterceptor(authenticateInterceptor())                .excludePathPatterns(&quot;&#x2F;logout&#x2F;**&quot;)                .excludePathPatterns(&quot;&#x2F;login&#x2F;**&quot;)                .addPathPatterns(&quot;&#x2F;**&quot;);    &#125;    @Bean    public AuthenticateInterceptor authenticateInterceptor() &#123;        return new AuthenticateInterceptor();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> 自动续期 </tag>
            
            <tag> java </tag>
            
            <tag> oauth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何判断this绑定</title>
      <link href="/2022/05/18/ru-he-pan-duan-this-bang-ding/"/>
      <url>/2022/05/18/ru-he-pan-duan-this-bang-ding/</url>
      
        <content type="html"><![CDATA[<h3 id="如何判断一个运行中函数this的绑定"><a href="#如何判断一个运行中函数this的绑定" class="headerlink" title="如何判断一个运行中函数this的绑定"></a>如何判断一个运行中函数this的绑定</h3><p>可以按照下面的顺序来进行判断：</p><ol><li><p>由new创建？this直接绑定新创建的对象</p><p>var bar &#x3D; new foo()</p></li><li><p>由call或者apply（或者bind）调用？绑定到指定的对象</p><p>  var bar &#x3D; foo.call(obj)</p></li><li><p>由上下文对象调用？ 绑定到那个上下文对象。</p><p>  var bar &#x3D; obj.foo()</p></li><li><p>默认：在严格模式下绑定到undefined否则绑定到全局对象。</p><p>  var far &#x3D; foo()</p></li></ol><p>一定要注意，有些调用可能无意中使用默认绑定规则。如果想“更安全”地忽略this绑定，你可以使用一个DMZ对象，比如ø &#x3D; object.create(null),以保护全局对象。</p><p>ES6中的箭头函数并不会使用四条标准的绑定规则，而是根据当前的词法作用域来决定this，具体来说，箭头函数会继承外层函数调用的this绑定（无论this绑定到什么）</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中arguments</title>
      <link href="/2022/05/17/js-zhong-arguments/"/>
      <url>/2022/05/17/js-zhong-arguments/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-中的-arguments-对象"><a href="#JS-中的-arguments-对象" class="headerlink" title="JS 中的 arguments 对象"></a>JS 中的 arguments 对象</h2><h3 id="1-在调用函数时，浏览器每次都会传递两个隐匿的参数"><a href="#1-在调用函数时，浏览器每次都会传递两个隐匿的参数" class="headerlink" title="1.在调用函数时，浏览器每次都会传递两个隐匿的参数"></a>1.在调用函数时，浏览器每次都会传递两个隐匿的参数</h3><ul><li>函数的上下文对象</li><li>封装实参的对象 arguments</li></ul><h3 id="2-arguments-是一个类数组对象，也可以获取长度"><a href="#2-arguments-是一个类数组对象，也可以获取长度" class="headerlink" title="2.arguments 是一个类数组对象，也可以获取长度"></a>2.arguments 是一个类数组对象，也可以获取长度</h3><ul><li>在调用函数时，传递的实参都会保存子 arguments 中，arguments.length 就是实参的个数。</li><li>即使不在函数中定义形参，也可以通过 arguments 来使用实参，<strong>不过使用起来比较麻烦</strong></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguements <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment">//检查arguements是不是数组</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arguements<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//使用Array的isArray()方法来检查arguements是不是一个数组</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguements<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token comment">//这里的arguements.length就是传递进来的实参的长度（个数）</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguements<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//输出索引为1的实参</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguements<span class="token punctuation">.</span>callee<span class="token punctuation">)</span> <span class="token comment">//输出的结果就是当前执行的函数，与console.log(list());相同</span><span class="token punctuation">&#125;</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-它里面有一个属性叫callee，这个属性对应一个函数对象，就是当前正在执行的函数对象"><a href="#3-它里面有一个属性叫callee，这个属性对应一个函数对象，就是当前正在执行的函数对象" class="headerlink" title="3.它里面有一个属性叫callee，这个属性对应一个函数对象，就是当前正在执行的函数对象"></a>3.它里面有一个属性叫callee，这个属性对应一个函数对象，就是当前正在执行的函数对象</h3>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> arguments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC</title>
      <link href="/2022/05/16/bfc/"/>
      <url>/2022/05/16/bfc/</url>
      
        <content type="html"><![CDATA[<h1 id="完全弄懂-BFC"><a href="#完全弄懂-BFC" class="headerlink" title="完全弄懂 BFC"></a>完全弄懂 BFC</h1><p>BFC 全称是 Block Formatting Context，即块级格式化上下文。</p><p>BFC 最初被定义在 css2.1 规范的 Visual formatting model 中。要想明白 BFC 到底是什么，首先看看什么是 visual formatting model</p><h2 id="视觉格式化模型（Visual-Formatting-Model）"><a href="#视觉格式化模型（Visual-Formatting-Model）" class="headerlink" title="视觉格式化模型（Visual Formatting Model）"></a>视觉格式化模型（Visual Formatting Model）</h2><p>视觉格式化模型是用来处理文档并将它显示在视觉媒体上得机制，它让视觉媒体知道如何吃力文档。（视觉媒体-user agent 通常指的是浏览器。）</p><p>在时候也格式化模型中铭文当属的每个元素根据盒模型生成零个或多个盒子。这些盒子的布局受一下因素控制：盒子得尺寸和类型、定位方案（普通文档流、浮动文档流和绝对定位流）、文档树中元素间的关系、外部因素（如视口大小、图像本身的尺寸等）</p><h2 id="普通文档流"><a href="#普通文档流" class="headerlink" title="普通文档流"></a>普通文档流</h2><p>普通文档流是一种定位方案。<br>在 css2.1 中，普通文档流包括：块级盒子的块级格式化上下文、内联级盒子的内联格式化上下文、块级和内联级盒子的相对定位</p><p>在普通文档流的盒子属于格式化上下文（formatting context）。可以属于块级或者内联级，但不能同时属于。块级盒子属于块级格式化上下文。内联盒子属于内联格式化上下文。</p><h2 id="格式化上下文（formatting-context）"><a href="#格式化上下文（formatting-context）" class="headerlink" title="格式化上下文（formatting context）"></a>格式化上下文（formatting context）</h2><p>Formatting Context,即格式化上下文。用于决定如何渲染文档的一个区域</p><p>不同的盒子使用不同的格式化上下文来布局</p><p>每个格式化上下文都拥有一套不同的渲染规则，他决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>简单理解为格式化上下文就是<strong>为盒子准备的一套渲染规则</strong>。</p><p>常见的格式化上下文有这样几种：</p><p>【Block formatting context】(BFC)</p><p>【Inline formatting context】(IFC)</p><p>【Grid formatting context】(GFC)</p><p>【Flex formatting context】(FFC)</p><h2 id="什么是-BFC"><a href="#什么是-BFC" class="headerlink" title="什么是 BFC"></a>什么是 BFC</h2><p>BFC 即 Block Formatting Context（块级格式化上下文）。</p><p>先来看看 W3C 对于 BFC</p><blockquote><p>Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than ‘visible’ (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.</p></blockquote><p>也就是，有这几种情况会创建 BFC：</p><ul><li>根元素（html）或者其他包含它的元素</li><li>浮动元素</li><li>绝对定位元素</li><li>非块级盒子的块级容器（inline-block，table-cells，table-captions 等）</li><li>overflow 部位 visible 的块级盒子</li></ul><p>BFC 的范围</p><blockquote><p>A block formatting context contains everything inside of the element creating it that is not also inside a descendant element that creates a new block formatting context.</p></blockquote><p>一个 BFC 包含创建该上下文元素的所有子元素，但不包括创建了新 BFC 的子元素的内部元素。</p><p>换句话说，一个元素不能同时存在两个 BFC 中。</p><h2 id="BFC-的特性"><a href="#BFC-的特性" class="headerlink" title="BFC 的特性"></a>BFC 的特性</h2><ul><li>盒子从顶部开始垂直排列</li><li>两个相邻的盒子之间的垂直距离由外边距（即 margin）决定</li><li>块级格式化上下文中相邻的盒子之间在垂直边距折叠</li><li>每个盒子的左外边与容器的左边接触（从右到左的格式化则相反），即使存在浮动也是如此，除非盒子建立了新的块格式化上下文</li><li>形成了 BFC 的区域不会与 float box 重叠</li><li>计算 BFC 的高度时，浮动子元素也参与计算</li></ul><h2 id="从实际代码来分析-BFC"><a href="#从实际代码来分析-BFC" class="headerlink" title="从实际代码来分析 BFC"></a>从实际代码来分析 BFC</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>BFC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token selector">*</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.green</span> <span class="token punctuation">&#123;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #73de80<span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #f31264<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.red</span> <span class="token punctuation">&#123;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #ef5be2<span class="token punctuation">;</span>        <span class="token property">opacity</span><span class="token punctuation">:</span> 0.5<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #f31264<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>        <span class="token property">min-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">.gray</span> <span class="token punctuation">&#123;</span>        <span class="token property">background</span><span class="token punctuation">:</span> #888<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gray<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/05/16/bfc/BFC1.png" alt="BFC1"></p><p>在这个例子中，构建出BFC的只有class名为green的盒子（浮动元素）</p><p>green盒子由于浮动，脱离普通文档流,形成浮动流。他好像跟其他两个盒子不在同一个世界一样。</p><p>现在普通文档流中只有gray和red盒子，所以gray的高度只被red撑起来。红色盒子也无视绿色盒子的存在，跑到了最左边。</p><h2 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h2><p>如果想要让灰色框包裹住绿色，最简单的方式就是给gray盒子构建出BFC</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.gray&#123;  background:#888;  height: 100%;  overflow: hidden;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/05/16/bfc/BFC2.png" alt="BFC2"></p><p>还记得BFC的特性吗？当我们计算BFC的高度时，浮动子元素也参与计算。这样一来我们就能灰色盒子的高度被绿色盒子撑开了。</p><h2 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h2><p>我们再来看看如何让红色盒子“接受”绿色盒子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.red &#123;  background: #EF5BE2;  opacity: 0.5;  border: 3px solid #F31264;  width: 400px;  min-height: 100px;  overflow: hidden;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/05/16/bfc/BFC3.png" alt="BFC3"></p><p>我们将红色盒子也构建出BFC，根据特性，形成BFC区域与float box不会发生重叠。于是这里红色成功“接受”了绿色盒子。</p>]]></content>
      
      
      <categories>
          
          <category> BFC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
            <tag> bfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise手写</title>
      <link href="/2022/05/13/promise-shou-xie/"/>
      <url>/2022/05/13/promise-shou-xie/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Promise"><a href="#什么是-Promise" class="headerlink" title="什么是 Promise"></a>什么是 Promise</h2><ul><li>语法上：<code>promise</code> 是一个构造函数，返回一个带有状态的对象</li><li>功能上：<code>promise</code> 用于解决异步函数并根据结果做出不同的应对</li><li>结果上：<code>promise</code> 是一个带有 <code>then</code> 方法的对象(js 中函数也是对象)</li></ul><hr><h2 id="为什么要使用-promise"><a href="#为什么要使用-promise" class="headerlink" title="为什么要使用 promise"></a>为什么要使用 promise</h2><p>前端最令人头疼的就是处理异步请求</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'/xxx/xxx'</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">init</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">render</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码层级多，可读性差且难以维护，形成回调地狱。</p><p>有了 promise，我们可以用同步的操作流程写异步操作，解决的了层层嵌套的回调函数的困扰。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 一些处理逻辑</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>  <span class="token comment">// or</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// 成功</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然 <code>promise</code> 也有缺点</p><ul><li>无法取消 promise，一旦新建就会立即执行，无法中途取消</li><li>如果不设置回调函数，无法抛出 Promise 内部错误到外部</li><li>当处于 Pending 状态时，无法得知目前运行的状态，是刚开始还是快结束</li></ul><h2 id="promise-的状态"><a href="#promise-的状态" class="headerlink" title="promise 的状态"></a>promise 的状态</h2><p><code>promise</code>有以下三种状态</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>状态只能由<code>pending</code>向<code>fulfilled</code>或<code>rejected</code>转变，且只有在执行环境堆栈包含平台代码时转变一次，成为状态凝固，并保存一个参数表明结果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value <span class="token comment">// fulfilled状态，保存终值</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason <span class="token comment">// rejected状态，保存据因</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>promise 构造函数接受一个函数作为参数，我们称该函数为<code>executor</code>，待<code>promise</code>执行时，会向<code>executor</code>函数传入两个参数分别为<code>resolve</code>和<code>reject</code>，它们只做 3 件事：</p><ul><li>改变<code>promise</code>状态</li><li>保存<code>value/reason</code>结果</li><li>执行<code>onFulfilled/onRejected</code>回调函数</li></ul><p>其中第三条即为<code>then</code>方法中配置的回调函数，这里暂先不讨论，先看前两条，只需要两行代码即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们先手撸一个简单的构造函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token keyword">class</span> <span class="token class-name">promise</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">PENDING</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 成功回调队列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 失败回调队列</span>    <span class="token comment">// 定义 resolve 函数</span>    <span class="token comment">// 这里使用箭头函数以解决 this 的指向</span>    <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 保证状态只能改变一次</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">FULFILLED</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 保证状态只能改变一次</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">REJECTED</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// executor函数会出现异常，需要铺货并调用rejext函数表示执行失败</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看上去还不错，大概的流程已经完成了。还记得之前说过，状态的改变是出于主线程空闲时，这里使用<code>setTimeout</code>来模拟，以及<code>resolve/reject</code>还剩下第三件事，现在让我们一起完善它吧</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// setTimeout模拟</span>  <span class="token comment">// 注意即便是判断状态是否为pending 也是要在主线程空闲时执行</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">FULFILLED</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token comment">// 若是使用foreEach回调函数有可能不按顺序执行</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// reject同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好啦，一个完整的构造及函数就写完了</p><p>接下来是重头戏<code>then</code>方法，<code>then</code>方法接受两个函数参数，分别是<code>onFulfilled/onRejected</code>，用来配置 promise 状态改变后的回调函数。<br>其有两个重点：</p><ol><li><p>返回一个<strong>promise2</strong>，以实现链式调用</p><ul><li>其中 promise2 的状态必须要凝固</li><li>通过 resolvePromise 函数以及 onFulfilled&#x2F;onRejected 的返回值来实现 promise2 的状态凝固</li></ul></li><li><p>监听或执行对应的 onFulfilled&#x2F;onRejected 的回调函数</p><ul><li>若是执行则需放入 event-loop</li><li>监听只需推入回调函数数组中</li></ul></li></ol><p>上述的<code>resolvePromise</code>我们先不理会，只要知道它是用来决定<code>promise2</code>的状态即可。</p><p>首先，<code>then</code> 需要返回一个<code>promise2</code>：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> promise2<span class="token keyword">return</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次 <code>then</code>函数的目的是配置或执行对应 onFulfilled&#x2F;onRejected 回调函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> promise2<span class="token keyword">return</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">// 将回调函数配置好并推入对应callback数组中</span><span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">// 配置第一步：执行callback函数，并保存返回值x</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token comment">// 配置第二步：通过resolvePromise决定resolvePromise函数决定promise2的状态</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// onRejected 同上</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里可以大概了解到<code>resolvePromise</code>是如何改变<code>promise2</code>状态的，它接受<code>promise2</code>的<code>resolve/reject</code> 由于箭头函数的原因，<code>resolve/reject</code>的<code>this</code>指向依旧指向<code>promise2</code>，从而可以通过 resolvePromise 来改变状态。<br>万一<code>onFulfilled/onRejected</code>出错怎么办？我们需要将他捕获并将 promise2 的状态改为<code>rejected</code>，我们将代码再做修改：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span>onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> promise2<span class="token keyword">return</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token comment">// 将回调函数配置好并推入对应callback数组中</span><span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// onRejected 同上</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span>x<span class="token punctuation">,</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果调用 <code>then</code> 方法的是已经状态凝固的 <code>promise</code> 呢，也要推入 <code>callbacks</code> 数组吗？答案当然不是，而是直接将配置好的 <code>onFulfilled/onRejected</code> 扔入 <code>event-loop</code> 中，就不劳烦 <code>resolve/reject</code> 了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// fulfilled 状态，将配置好的回调函数扔入 event-loop</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// rejected 状态同上</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// pending 状态则交由 resolve/reject 来决定</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看上去完美了，不过还差一件小事，假如 promise 使用者不按套路出牌，传入的 <code>onFulfilled/onRejected</code> 不是一个函数怎么办？这里我们就直接将之作为返回值直接返回：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> promise2    <span class="token comment">// 确保 onFulfilled/onRejected 为函数</span>    <span class="token comment">// 若非函数，则转换为函数并且返回值为自身</span>    onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=></span> value    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> reason    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大功告成！<br>最后只剩下一个 resolvePromise 方法，先介绍一下它的功能：根据回调的返回值 x 决定 promise2 的最终状态：</p><ul><li>如果 x 为 thenable 对象，即带 then 方法的对象<ul><li>有，因其不一定符合 promise 得标准，多做一些准备</li><li>无，当作普通值执行</li><li>使用 called 变量使得其状态改变只能发生一次</li><li>监听异常</li><li>递归调用 resolvePromise 以防止出现套娃</li><li>如果 x 为 promise，则递归调用，直到返回值为普通值为止</li><li>如果 x 为函数或对象，判断其有无 then 方法</li></ul></li><li>x 为普通值<ul><li>直接返回</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 先从 x 为 thenable 对象开始</span>  <span class="token comment">// 如果 x === promise2 需要抛出循环引用错误，否则会死循环</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> promise2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">newTypeError</span><span class="token punctuation">(</span><span class="token string">'循环引用'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果 x 就是 promise</span>  <span class="token comment">// 根据 x 的状态来决定 promise2 的状态</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// x 状态为 PENDING 时</span>    <span class="token comment">// 当 x 被 resolve 会调用新的 resolvePromise</span>    <span class="token comment">// 因为怕 resolve 保存的终值还是 promise 继续套娃</span>    <span class="token comment">// 所以一定要递归调用 resolvePromise 保证最终返回的一定是普通值</span>    <span class="token comment">// 失败直接调用 reject 即可</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">y</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// x 状态凝固，直接配置即可</span>      <span class="token comment">// 不过这里有个疑问</span>      <span class="token comment">// 如果之前 resolve 保存的终值还是 promise 呢</span>      <span class="token comment">// 该怎样预防这一问题，后续将会讲到</span>      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在把应对 <code>x</code> 的值为 <code>promise</code> 的代码书写完毕，但这还不够，我们要面对的不只是 <code>promise，而是一个</code> <code>thenable</code> 对象，所以还要继续判断：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> promise2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">newTypeError</span><span class="token punctuation">(</span><span class="token string">'循环引用'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 前面的代码不再赘述</span>  <span class="token punctuation">&#125;</span> <span class="token function">elseif</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 因为不一定是规范的 promise 对象</span>      <span class="token comment">// 我们需要保证状态的改变只发生一次</span>      <span class="token comment">// 加入一个 called 变量来加锁</span>      <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token comment">// 还是因为不一定是规范的 promise 对象</span>      <span class="token comment">// 需要保证运行时异常能够被捕获</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 注意，前面不加 try/catch</span>          <span class="token comment">// 仅仅下面这一行代码也有可能会报错而无法被捕获</span>          <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then          <span class="token comment">// 假如 x.then 存在并为函数</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 使用 call 方法保证 then 的调用对象为 x</span>              then<span class="token punctuation">.</span>call<span class="token punctuation">&#123;</span>                  x<span class="token punctuation">,</span>                  <span class="token parameter">y</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      <span class="token comment">// 假如状态凝固便不再执行</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>                      called <span class="token operator">=</span> <span class="token boolean">true</span>                      <span class="token comment">// 防止出现 resolve 保存 promise 的情况</span>                      <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                  <span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                      <span class="token comment">// 同上</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>                      called <span class="token operator">=</span> <span class="token boolean">true</span>                      <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>                  <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果 x.then 不是函数</span>            <span class="token comment">// 即为普通值，直接 resolve 就好</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 若调用一个不正规的 thenalbe 对象出错</span>          <span class="token comment">// 抛出异常</span>          <span class="token comment">// 这里要注意，这里出现错误很有可能是执行了 x.then 方法，而之前也说过，其不一定正规，可能状态已经凝固，需要多加一重保险</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>          called <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 不是 thenable 对象，那就是普通值</span>       <span class="token comment">// 直接 resolve</span>       <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一套行云流水的代码写下来，我们的 <code>promise</code> 就完成了，不过还记得之前代码里留了个疑问吗？当 <code>x</code> 为 <code>promise</code> 且状态凝固时，如果确定它保存的终值的不是 <code>promise</code> 呢？其实只要最开始的 <code>resolve</code> 函数多加一重判断即可：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">FULFILLED</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次防止套娃！</p><p>好啦，也许你会问，我怎么知道这个手写的 promise 就一定是正确的呢？接下来将一步步带你验证！</p><p>首先找到一个空文件夹，在命令行输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm init -y&#x2F;&#x2F; 下载 promise 测试工具npm install promises-aplus-tests -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>新建 <code>promise.js</code> 文件，并将你实现的 <code>promise</code> 复制于此，并在下方加入一下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">MyPromise<span class="token punctuation">.</span><span class="token function-variable function">deferred</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> defer <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  defer<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    defer<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve    defer<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> defer<span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPromise<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再修改 package.json 文件如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;name&quot;: &quot;promise&quot;,  &quot;version&quot;: &quot;1.0.0&quot;,  &quot;description&quot;: &quot;&quot;,  &quot;main&quot;: &quot;index.js&quot;,  &quot;scripts&quot;: &#123;    &quot;test&quot;: &quot;promises-aplus-tests .&#x2F;promise.js&quot;  &#125;,  &quot;devDependencies&quot;: &#123;    &quot;promises-aplus-tests&quot;: &quot;^2.1.2&quot;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一步：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm run test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后附上完整实现代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">PENDING</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">FULFILLED</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value          <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">REJECTED</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason          <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">cb</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> promise2    onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onFulfilled</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=></span> value    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> reason    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> promise2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token function">newTypeError</span><span class="token punctuation">(</span><span class="token string">'循环引用'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        <span class="token parameter">y</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token function">elseif</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>          x<span class="token punctuation">,</span>          <span class="token parameter">y</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>            called <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>            called <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span>      called <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>MyPromise<span class="token punctuation">.</span><span class="token function-variable function">deferred</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> defer <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  defer<span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    defer<span class="token punctuation">.</span>resolve <span class="token operator">=</span> resolve    defer<span class="token punctuation">.</span>reject <span class="token operator">=</span> reject  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> defer<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPromise<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/07/hello-world/"/>
      <url>/2022/05/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Helloworld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则小总结</title>
      <link href="/2022/05/07/zheng-ze-xiao-zong-jie/"/>
      <url>/2022/05/07/zheng-ze-xiao-zong-jie/</url>
      
        <content type="html"><![CDATA[<ul><li><p>字符: <code>a b c d 1 2 3 4</code> etc.</p></li><li><p>字符类: <code>.[abc] [a-z] \d \w \s</code></p></li><li><ul><li><code>.</code> 代表任何字符</li><li><code>\d 表示</code>“数字”</li><li><code>\w</code> 表示”字母”, <code>[0-9A-Za-z_]</code></li><li><code>\s </code>表示 “空格, 制表符,回车或换行符”</li><li>否定字符类: <code>[^abc] \D \W \S</code></li></ul></li><li><p>重复: <code>&#123;4&#125; &#123;3,16&#125; &#123;1,&#125; ? * +</code></p></li><li><ul><li><code>?</code> 表示 “零次或一次”</li><li><code>*</code> 表示 “大于零次”</li><li><code>+</code> 表示 “一次或一次以上”</li><li>如果不加上？，所有的重复都是最长匹配的（贪婪）</li></ul></li><li><p>分组: <code>(Septem|Octo|Novem|Decem)ber</code></p></li><li><p>词，行以及文本的分隔: <code>\b ^ $ \A \z</code></p></li><li><p>转义字符: <code>\1 \2 \3</code> etc. (在匹配表达式和替换表达式中都可用)</p></li><li><p>元字符: <code>. \ [ ] &#123; &#125; ? * + | ( ) ^ $</code></p></li><li><p>在字符类中使用元字符: <code>[ ] \ -``^</code></p></li><li><p>使用反斜杠可以忽略元字符: <code>\</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>remote模块</title>
      <link href="/2022/05/07/remote-mo-kuai/"/>
      <url>/2022/05/07/remote-mo-kuai/</url>
      
        <content type="html"><![CDATA[<h1 id="remote模块"><a href="#remote模块" class="headerlink" title="remote模块"></a>remote模块</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>remote在electron &gt; 10的版本中已被弃用，最终将被删除</p><p>@electron&#x2F;remote是一个<code>electron</code>模块，它将JavaScript对象从主进程桥接到渲染器进程，这使得我们可以访问主进程的对象，就像它们在渲染器进程中可用一样。</p><blockquote><p>⚠警告!:这个模块有许多微妙的缺陷。有更好的解决方案比使用此模块更好的方法来完成您的任务。例如<code>ipcRender.invoke</code>可以服务于许多常见的用例</p></blockquote><h2 id="使用此模块的基本步骤"><a href="#使用此模块的基本步骤" class="headerlink" title="使用此模块的基本步骤"></a>使用此模块的基本步骤</h2><ol><li>你需要安装它<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --save @electron&#x2F;remote<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>初始化在它被渲染进程使用之前<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;&#x2F; in the main process:require(&#39;@electron&#x2F;remote&#x2F;main&#39;).initialize()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>require(‘electron’).remote 替换成 require(‘@electron&#x2F;remote’)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x2F;&#x2F; in the renderer process:&#x2F;&#x2F; Beforeconst &#123; BrowserWindow &#125; &#x3D; require(&#39;electron&#39;).remote&#x2F;&#x2F; Afterconst &#123; BrowserWindow &#125; &#x3D; require(&#39;@electron&#x2F;remote&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：由于这需要通过 npm 使用模块而不是内置模块，因此如果您remote从沙盒进程中使用，则需要适当配置您的打包器以打包@electron&#x2F;remote 预加载脚本中的代码。当然，<code>使用@electron/remote会使沙箱的效率大大降低。</code></p></blockquote></li></ol><blockquote><p>注意：在 中<code>electron &gt;= 14.0.0</code>，您必须使用新的<code>enable</code>API 来<code>WebContents</code>分别为每个所需的启用远程模块：require(“@electron&#x2F;remote&#x2F;main”).enable(webContents</p></blockquote><p>在 中electron &lt; 14.0.0，@electron&#x2F;remote尊重WebPreferences的enableRemoteModule 值。您必须传递<code>&#123; webPreferences: &#123; enableRemoteModule: true &#125; &#125;</code>给BrowserWindow应该被授予使用权限 的构造函数@electron&#x2F;remote。</p>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Electron </tag>
            
            <tag> remote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Context-isolation</title>
      <link href="/2022/05/07/context-isolation/"/>
      <url>/2022/05/07/context-isolation/</url>
      
        <content type="html"><![CDATA[<h2 id="contextIsolation-上下文隔离"><a href="#contextIsolation-上下文隔离" class="headerlink" title="contextIsolation 上下文隔离"></a>contextIsolation 上下文隔离</h2><p>上下文隔离是一项功能，可确保你的<code>preload</code>脚本和electron的内部逻辑都在与您加载到<code>webContents</code>，这对于安全目的很重要，因为它有助于防止网站访问Electron内部或您的预加载脚本可以访问强大API。</p><p>这意味着<code>window</code>您的预加载脚本有权访问的对象实际上与网站有权访问的对象不同。例如，如果您<code>window.hello = &#39;wave&#39;</code>在预加载脚本中设置并启用了上下文隔离，<code>window.hello</code>则在网站尝试访问它时将是未定义的。</p><p>自 Electron 12 以来，上下文隔离已默认启用，它是所有应用程序的推荐安全设置。</p><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><h4 id="之前：情境隔离已禁用"><a href="#之前：情境隔离已禁用" class="headerlink" title="之前：情境隔离已禁用"></a>之前：情境隔离已禁用</h4><p>将预加载脚本中的 API 暴露给渲染器进程中加载的网站是一个常见用例。禁用上下文隔离后，您的预加载脚本将window与渲染器共享一个公共全局对象。然后，您可以将任意属性附加到预加载脚本：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// preload.js</span><span class="token comment">// preload with contextIsolation disabled</span>window<span class="token punctuation">.</span>myApi<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">doAThing</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>doAThing()</code>然后就可以在渲染进程中使用该函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// render.js</span><span class="token comment">// use the exposed API in the renderer</span>window<span class="token punctuation">.</span>myApi<span class="token punctuation">.</span><span class="token function">doAThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="之后：上下文启用隔离"><a href="#之后：上下文启用隔离" class="headerlink" title="之后：上下文启用隔离"></a>之后：上下文启用隔离</h4><p>Electron中有一个专用模块可以帮助您轻松完成此操作。该<code>contextBridge</code>模块可用于将API从预加载脚本的隔离上下文安全的公开到网站运行的上下文。API也可以<code>window.myAPI</code>像以前一样从网站访问。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// preload with contextIsolation enabled</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> contextBridge <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'electron'</span><span class="token punctuation">)</span>   contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">'myAPI'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   <span class="token function-variable function">doAThing</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// render.js</span><span class="token comment">// use the exposed API in the renderer</span>window<span class="token punctuation">.</span>myApi<span class="token punctuation">.</span><span class="token function">doAThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="安全注意事项"><a href="#安全注意事项" class="headerlink" title="安全注意事项"></a>安全注意事项</h4><p>仅启用contextIsolation和使用contextBridge并不自动意味着您所做的一切都是安全的。例如，这段代码是不安全的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ❌ Bad code</span>   contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">'myAPI'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">send</span><span class="token operator">:</span> ipcRenderer<span class="token punctuation">.</span>send   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它直接公开了一个强大的 API，没有任何类型的参数过滤。这将允许任何网站发送您不希望成为可能的任意 IPC 消息。公开基于 IPC 的 API 的正确方法是为每个 IPC 消息提供一种方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ✅ Good code</span>contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">'myAPI'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">loadPreferences</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> ipcRenderer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">'load-prefs'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Electron </category>
          
      </categories>
      
      
        <tags>
            
            <tag> contextIsolation </tag>
            
            <tag> 隔离 </tag>
            
            <tag> node </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>commonJs</title>
      <link href="/2022/05/07/commonjs/"/>
      <url>/2022/05/07/commonjs/</url>
      
        <content type="html"><![CDATA[<h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>长久以来Javascript都不支持模块化，但随着前端工程越来越庞大、复杂，模块的需求也越来越高。为此，社区推出了各种模块化的实现和规范，比如AMD规范、CMD规范和CommonJs规范等。Node.js使用的CommonJs规范，它通过module.export导出模块。演示代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 模块文件：module.js</span>   module<span class="token punctuation">.</span>export <span class="token operator">=</span> <span class="token punctuation">&#123;</span>       <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'My name is module'</span>       <span class="token function-variable function">say</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'log from module.js'</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 入口文件</span>   <span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./module.js'</span><span class="token punctuation">)</span>   myModule<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把以上代码放到用以目录，在该目录下打开命令行，在命令行执行如下指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&gt; node main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终程序输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&gt; log from module.js&gt; My name is module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这说明入口程序已经加载了模块module.js,并且能访问此模块下导出的内容，这就是Node.js为开发者提供的模块机制。<br>一旦一个模块被导入运行环境中，就会被缓存。当再次尝试导入这个模块是，就会读取缓存中的内容，而不会重新加载一边这个模块的代码。这种机制不仅避免了重复导入相同模块冲突的问题，还保证了程序的执行效率。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> commonJs </tag>
            
            <tag> javascript </tag>
            
            <tag> nodeJs </tag>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git仓库下面另一个clone过来的仓库的提交问题</title>
      <link href="/2022/05/07/git-cang-ku-xia-mian-ling-yi-ge-clone-guo-lai-de-cang-ku-de-ti-jiao-wen-ti/"/>
      <url>/2022/05/07/git-cang-ku-xia-mian-ling-yi-ge-clone-guo-lai-de-cang-ku-de-ti-jiao-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>如果你的 git 仓库下面还有另外的 clone 过来的仓库，那么在你正常的提交代码时<code>git commit</code>的时候一定会出现如下图的错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">D:\blog\nevan-blog&gt; git commit -m &#39;commit&#39;On branch masterYour branch is a ahead of &#39;origin&#x2F;master&#39; by 1 commit.  &lt;use &#39;git push&#39; to publish your local commit&gt;Changes not staged for commit:modified:themes&#x2F;matery(modified content)no changes add to commitD:\blog\nevan-blog&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且上传到仓库的文件夹是空的</p><h4 id="1-先强行删除-clone-来的目录下面的-git-文件"><a href="#1-先强行删除-clone-来的目录下面的-git-文件" class="headerlink" title="1. 先强行删除 clone 来的目录下面的.git 文件"></a>1. 先强行删除 clone 来的目录下面的.git 文件</h4><p>   删除方式：在该目录下打开命令行工具，执行<code>rd /s/q .git</code><br>   删除成功后执行<code>ls .git</code>命令查看是否删除成功</p><h4 id="2-回到仓库根目录删除仓库中的空文件夹"><a href="#2-回到仓库根目录删除仓库中的空文件夹" class="headerlink" title="2. 回到仓库根目录删除仓库中的空文件夹"></a>2. 回到仓库根目录删除仓库中的空文件夹</h4><ul><li><code>git rm -r --cached &quot;themes/matery&quot;</code></li><li><code>git commit -m &quot;remove empty folder&quot;</code></li><li><code>git push origin master</code></li></ul><h4 id="3-在仓库根目录删除仓库中的空文件夹"><a href="#3-在仓库根目录删除仓库中的空文件夹" class="headerlink" title="3. 在仓库根目录删除仓库中的空文件夹"></a>3. 在仓库根目录删除仓库中的空文件夹</h4><ul><li><code>git add .</code></li><li><code>git commit -m &quot;remove empty folder&quot;</code></li><li><code>git push origin master</code></li></ul><h4 id="4-在仓库根目录重新提交代码"><a href="#4-在仓库根目录重新提交代码" class="headerlink" title="4. 在仓库根目录重新提交代码"></a>4. 在仓库根目录重新提交代码</h4><ul><li><code>git add .</code></li><li><code>git commit -m &quot;repush&quot;</code></li><li><code>git push origin master</code></li></ul><p>这样就能保证不报上面的错，并且删除了空文件夹，重新把 clone 下来的目录上传到仓库重</p><h4 id="说明下出现这种情况的原因："><a href="#说明下出现这种情况的原因：" class="headerlink" title="说明下出现这种情况的原因："></a>说明下出现这种情况的原因：</h4><blockquote><p>由于 clone 下来的文件夹也是一个 clone 仓库，因此正常的<code>git add .</code>是无法提交改文件夹下的文件的，所以我们要做的就是删除文件夹下的.git 文件夹使其不关联 clone 的仓库，这样就能通过 <code>git add .</code>命令来提交内容了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> 搭建 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小白第一次搭建hexo博客记录</title>
      <link href="/2022/05/07/xiao-bai-di-yi-ci-da-jian-hexo-bo-ke-ji-lu/"/>
      <url>/2022/05/07/xiao-bai-di-yi-ci-da-jian-hexo-bo-ke-ji-lu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
